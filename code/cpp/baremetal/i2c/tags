!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
I2C_ADDRESS_10B	bm_i2c.h	/^			I2C_ADDRESS_10B = 2	\/\/ 10 bits addressing mode  $/;"	e	enum:bm_i2c::__anon3
I2C_ADDRESS_7B	bm_i2c.h	/^			I2C_ADDRESS_7B	= 1,	\/\/ 7  bits addressing mode  $/;"	e	enum:bm_i2c::__anon3
I2C_SPEED_FAST	bm_i2c.h	/^			I2C_SPEED_FAST			= 2,	\/\/ Fm	400 kbits\/s $/;"	e	enum:bm_i2c::__anon2
I2C_SPEED_FAST_PLUS	bm_i2c.h	/^			I2C_SPEED_FAST_PLUS		= 3,	\/\/ Fm+	1	Mbits\/s$/;"	e	enum:bm_i2c::__anon2
I2C_SPEED_HIGH_SPEED	bm_i2c.h	/^			I2C_SPEED_HIGH_SPEED	= 4,	\/\/ Hs	3.4 Mbits\/s $/;"	e	enum:bm_i2c::__anon2
I2C_SPEED_STANDART	bm_i2c.h	/^			I2C_SPEED_STANDART		= 1,	\/\/ Sm	100 kbits\/s This mode will be choosen for the constructor. $/;"	e	enum:bm_i2c::__anon2
I2C_SPEED_ULTRA_FAST	bm_i2c.h	/^			I2C_SPEED_ULTRA_FAST	= 5		\/\/ UFm	5	Mbits\/s$/;"	e	enum:bm_i2c::__anon2
I2C_STATE_ABORT	bm_i2c.h	/^			I2C_STATE_ABORT		= 7,	\/\/ Aborted by user$/;"	e	enum:bm_i2c::__anon1
I2C_STATE_ERROR	bm_i2c.h	/^			I2C_STATE_ERROR		= 9 	\/\/ Error happened$/;"	e	enum:bm_i2c::__anon1
I2C_STATE_LISTEN	bm_i2c.h	/^			I2C_STATE_LISTEN	= 6,	\/\/ Listening$/;"	e	enum:bm_i2c::__anon1
I2C_STATE_READY	bm_i2c.h	/^			I2C_STATE_READY		= 2,	\/\/ Ready$/;"	e	enum:bm_i2c::__anon1
I2C_STATE_RESET	bm_i2c.h	/^			I2C_STATE_RESET		= 1,	\/\/ Not Initialized$/;"	e	enum:bm_i2c::__anon1
I2C_STATE_RX	bm_i2c.h	/^			I2C_STATE_RX		= 5,	\/\/ Receiving$/;"	e	enum:bm_i2c::__anon1
I2C_STATE_TIMEOUT	bm_i2c.h	/^			I2C_STATE_TIMEOUT	= 8,	\/\/ Timeout$/;"	e	enum:bm_i2c::__anon1
I2C_STATE_TX	bm_i2c.h	/^			I2C_STATE_TX		= 4,	\/\/ Transmitting$/;"	e	enum:bm_i2c::__anon1
bm_i2c	bm_i2c.cpp	/^bm_i2c::bm_i2c(uint8_t channel, uint8_t address, uint8_t DMA)$/;"	f	class:bm_i2c
bm_i2c	bm_i2c.h	/^class bm_i2c$/;"	c
bm_i2c_address_t	bm_i2c.h	/^		} bm_i2c_address_t;$/;"	t	class:bm_i2c	typeref:enum:bm_i2c::__anon3
bm_i2c_speed_t	bm_i2c.h	/^		} bm_i2c_speed_t; \/\/ PLease note that speed modes engender a behavioural change$/;"	t	class:bm_i2c	typeref:enum:bm_i2c::__anon2
bm_i2c_state_t	bm_i2c.h	/^		} bm_i2c_state_t;$/;"	t	class:bm_i2c	typeref:enum:bm_i2c::__anon1
initChannel	bm_i2c.cpp	/^bm_i2c::initChannel()$/;"	f	class:bm_i2c
m_address	bm_i2c.h	/^		uint8_t m_address;					\/\/ Address of the device to be communicated$/;"	m	class:bm_i2c
m_addressMode	bm_i2c.h	/^		bm_i2c_address_t m_addressMode; \/\/ Address of the device to be communicated$/;"	m	class:bm_i2c
m_bufferPointer	bm_i2c.h	/^		uint8_t *m_bufferPointer;			\/\/ Buffer pointer for data to be sent & received$/;"	m	class:bm_i2c
m_channel	bm_i2c.h	/^		uint8_t m_channel;					\/\/ Selection of I2C Hardware Channel$/;"	m	class:bm_i2c
m_dma	bm_i2c.h	/^		uint8_t m_dma;						\/\/ Indication for DMA ToDo : Define if it's really necessery$/;"	m	class:bm_i2c
m_error	bm_i2c.h	/^		uint32_t m_error;					\/\/ The error code corresponding to that error$/;"	m	class:bm_i2c
m_fileDescriptor	bm_i2c.h	/^		uint16_t m_fileDescriptor;			\/\/ For Linux i2c file description$/;"	m	class:bm_i2c
m_fileName	bm_i2c.h	/^		uint8_t m_fileName[20];				\/\/ For Linux i2c file name$/;"	m	class:bm_i2c
m_interruptSource	bm_i2c.h	/^		uint32_t m_interruptSource;			\/\/ From what this interrupt is coming$/;"	m	class:bm_i2c
m_interrupttFlags	bm_i2c.h	/^		uint32_t m_interrupttFlags; 		\/\/ Interrupt flag that would be sent$/;"	m	class:bm_i2c
m_speed	bm_i2c.h	/^		bm_i2c_speed_t m_speed;		\/\/ Trasmission speed$/;"	m	class:bm_i2c
m_state	bm_i2c.h	/^		bm_i2c_state_t m_state;		\/\/ Current state of this i2c Object$/;"	m	class:bm_i2c
m_timeout	bm_i2c.h	/^		uint32_t m_timeout;					\/\/ Timeout for managing communication breaks$/;"	m	class:bm_i2c
m_transferCount	bm_i2c.h	/^		uint8_t m_transferCount;			\/\/ Internal counter for the count of data Transfer$/;"	m	class:bm_i2c
m_transferSize	bm_i2c.h	/^		volatile uint8_t m_transferSize;	\/\/ Size of the data to be sent or received$/;"	m	class:bm_i2c
setAddress	bm_i2c.cpp	/^bm_i2c::setAddress(uint8_t address) : m_address(address)$/;"	f	class:bm_i2c
throwError	bm_i2c.cpp	/^bm_i2c::throwError(uint16_t error)$/;"	f	class:bm_i2c
